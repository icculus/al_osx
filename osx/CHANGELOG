
/*
 * CHANGELOG.
 */

11242003 - Made some optimizations in alSoftware.c: always use recip sqrt
           with newton-raphson, and inline it...this is a good speed win.
           G5 users can build with USE_G5_SQRT for a little more speed, but
           the binary will crash on a G4. Cleaned up some code that doesn't
           optimize well and inlined the hell out of some stuff. Hopefully
           nothing's broken. There's some new Altivec code in there, but I
           have it commented out currently, since there is less of a win
           if we can't inline it...if I rewrite the code to have a pure
           Altivec version, that'll be useful, though. __alRecalcMonoSource()
           has been merged with __alCalcSourceAttributes(), to reduce
           function call overhead. Replaced calculated channel gains with
           an array of gains, in case we ever get past stereo panning.
11162003 - Replaced all the downsamplers with Bresenham thingey, but who am I
           kidding? I'm already planning to rip this shit out for the audio
           buffer equivalent of Bresenham's run length algorithm.
           Cleaned up source attribute management. Now we only recalculate
           source mixing attributes if something has really changed, instead
           of when alSource*() is called at all...this should cut down on
           processing for apps that set source state every frame whether it
           has changed or not. Removed tab characters from alSource.c.
11122003 - Mono downsamplers now slow-but-correct...just a temporary hack to
           fix incorrect render of a sentence in the ArmyOps SFAVWID lecture.
           Cleaned up some tabs.
11102003 - alBufferData() now allocates enough to deal with unaligned
           Altivec loads.
10262003 - Replaced arbitrary upsamplers with something based on Bresenham's
           line drawing algorithm...you can think of the audio buffers like
           the X and Y points on a line: sample the same point in the source
           buffer to incrementing points in the destination buffer as you
           would do a run length across the X axis, and move ahead one sample
           in the source buffer every time you would increment up the Y axis
           to start a new run length. Works pretty well between two arbitrary
           sample rates (8000 -> 44100 in my test), and is totally integer,
           so it's very fast...could be faster if I take the branching out of
           the loop, though. We now keep track of an array of pointers to
           playing (and potentially playing) sources so that __alcMixContext()
           doesn't have to iterate over an array of sources, which thrashes
           the CPU cache for no good reason; now we only need to move sources
           into the cache if there's a chance they'll need processing during
           a given callback, and if they have been stopped (or complete
           processing), __alcMixContext() removes them from the array. Net
           result is that __alcMixContext() runs about 3 times faster (0.1%
           of the CPU instead of 0.3% in ut2003), but adds a bit of complexity
           to the code. Similar optimizations were done to __alcMixDevice()
           (formerly known as __alcDeviceFillingProc()). Other cleanups and
           optimizations. Made a first attempt at playing with vec_dst in the
           Altivec mixers, but the results were negligible for what will
           prove to add more complications due to G5 architecture changes.
           It's probably best to leave this alone, so the code is there in
           the mono16 mixer, but commented out.
10252003 - Put in crappy arbitrary upsampling code for mono8 and mono16...
           the previous version was piddling over memory. These need to be
           fixed properly, still.
10202003 - Added Altivec mono8 mixer. Mono16 and Mono8 mixers now never fall
           back to scalar version unless absolutely forced to, for notable
           speed boost. Average mono8 and mono16 mixing time in ut2003 is
           now up to four times less. Other minor fixes, cleanups, and
           optimizations to the mixers.
10192003 - Minor fixes to the Vorbis decoder...some .oggs were suffering from
           minor decoding defects due to some optimizations.
10182003 - Fixed testqueueing.c to not eat whole CPU. alBufferData() now uses
           linear resampling when converting to device format (thanks, Joe!).
           Some other corrections and cleanups.
10162003 - Moved some stuff around in alExtension.c in hopes of clearing out
           the gcc 3.1 optimization bug.
10152003 - Hack in arbitrary upsamplers to fix buffer overflow. I'm still
           displeased with the resampling code. I want it to sound better
           without sacrificing too much speed. Panning code was backwards
           (whoops), so audio should play left-to-right correctly now.
10142003 - Removed a FIXME comment.
10132003 - Makefile should now favor internal Ogg Vorbis headers over those
           installed system-wide.
10122003 - Initial posting on icculus.org.

--ryan. (icculus@clutteredmind.org)

/* end of CHANGELOG ... */


